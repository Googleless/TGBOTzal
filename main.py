import asyncio

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

import klava

bot = Bot(token=klava.BOT_TOKEN)

dp = Dispatcher()


# —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≥–æ—Ä–æ—Å–∫–æ–ø–∞
class HoroscopePages(StatesGroup):
    first_page = State()
    second_page = State()


# —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–µ–Ω—é
class InMenu(StatesGroup):
    in_menu = State()
    not_in_menu = State()


# –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è –Ω–µ–∑–Ω–∞—é –µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —É–¥–∞–ª—è—Ç—å –Ω–µ —Ö–æ—á—É
available_pages = ["–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞", "–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"]
###########################################################################################################


# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!", reply_markup=klava.main_kn)
    await state.set_state(InMenu.in_menu)
###########################################################################################################


# –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(StateFilter(None, InMenu.in_menu), lambda message: message.text == "üìí–ú–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é... ", reply_markup=klava.menu_kb)
    await state.set_state(InMenu.in_menu)


@dp.message(lambda message: message.text == "‚öñÔ∏è–ë—ã—Å—Ç—Ä—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø")
async def send_horoscope(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø... ", reply_markup=klava.reply_kb1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ", reply_markup=klava.horoscope_kb1)
    await state.set_state(HoroscopePages.first_page)
###########################################################################################################


# –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:
@dp.message(StateFilter(InMenu.in_menu), lambda message: message.text == "üìù–£—Å–ª—É–≥–∏")
async def services(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=klava.services_kb)


@dp.message(StateFilter(InMenu.in_menu), lambda message: message.text == "üíµ–¢–æ–≤–∞—Ä—ã")
async def goods(message: types.Message):
    await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã...", reply_markup=klava.goods_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ", reply_markup=klava.simple_goods_kb)


@dp.message(StateFilter(InMenu.in_menu), lambda message: message.text == "‚ùî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: types.Message):
    await message.answer("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à–∏ —Å–µ–∫—Ä–µ—Ç—ã... ", reply_markup=klava.info_kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:  ", reply_markup=klava.inlineinfo_kb)


@dp.message(StateFilter(InMenu.in_menu), lambda message: message.text == "üìú–û –ø—Ä–æ–µ–∫—Ç–µ")
async def services(message: types.Message):
    await message.answer("–õ–∞–ø–æ—á–∫–∏, —Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –Ω–∞–¥ —ç—Ç–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º :3", reply_markup=klava.developers_kb)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!", reply_markup=klava.simple_menu_kb)
###########################################################################################################


# –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@dp.message(lambda message: message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...  ", reply_markup=klava.main_kn)
    await state.set_state(InMenu.in_menu)
###########################################################################################################


# —Ç—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞, –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç
# –≤—Ä–æ–¥–µ –Ω–µ –ª–æ–º–∞–ª–æ—Å—å, –Ω–∞–¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
@dp.message(
    HoroscopePages.first_page,
    F.text.in_(available_pages))
async def horoscope_pg2(message: Message, state: FSMContext):
    await message.answer("–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞", reply_markup=klava.horoscope_kb2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ", reply_markup=klava.reply_kb2)
    await state.set_state(HoroscopePages.second_page)


@dp.message(
    HoroscopePages.second_page,
    F.text.in_(available_pages))
async def horoscope_pg1(message: types.Message, state: FSMContext):
    await state.update_data(page=message.text.lower())
    await message.answer("–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞", reply_markup=klava.horoscope_kb1,)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: ", reply_markup=klava.reply_kb1)
    await state.set_state(HoroscopePages.first_page)
###########################################################################################################
# —Ç—É—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
# –Ω–∞–¥–æ –±—É–¥–µ—Ç –¥–∞—Ç—å –∞—Ä—Ç—ë–º—É –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç—å


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
